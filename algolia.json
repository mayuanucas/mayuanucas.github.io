[{"categories":["效率工具"],"content":"2021年1月1日，告别使用了三年的Hexo，正式迁移到Hugo. 原因 使用Hexo+Next+GitHub Pages搭建博客已经有三年的时间了，但是随着文章数量的增长，Hexo生成博客的速度也慢下来了，而且Hexo对Latex公式的支持不给力。怀着对Golang 的信仰，至此加入Golang的生态圈，拥抱Hugo。 开始迁移 ","date":"2021-01-01","objectID":"https://mayuanucas.github.io/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/:0:0","tags":["博客","Hugo"],"title":"博客迁移","uri":"https://mayuanucas.github.io/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"},{"categories":["效率工具"],"content":"简介 Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again. Hugo是一个基于Go语言开发的静态网站生成器，主打简单、易用、高效、易扩展、快速部署，丰富的主题也使得Hugo在个人博客站点搭建方面也使用广泛。迁移到Hugo后，安装、构建、部署整个流程相比Hexo，速度提升飞快🚀。 ","date":"2021-01-01","objectID":"https://mayuanucas.github.io/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/:1:0","tags":["博客","Hugo"],"title":"博客迁移","uri":"https://mayuanucas.github.io/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"},{"categories":["效率工具"],"content":"安装 本地macOS平台直接使用Homebrew安装 brew install hugo ","date":"2021-01-01","objectID":"https://mayuanucas.github.io/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/:2:0","tags":["博客","Hugo"],"title":"博客迁移","uri":"https://mayuanucas.github.io/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"},{"categories":["效率工具"],"content":"创建新站点 hugo new site blog cd blog hugo new posts/博客迁移.md 这个时候就已经创建了新的博客站点blog，并且创建了第一篇文章博客迁移.md，新建的文章位于/blog/content/posts目录下。 新建文章注意 默认情况下，所有文章新建都为草稿，草稿文章是不渲染的，需要修改头部draft: true为draft: false ","date":"2021-01-01","objectID":"https://mayuanucas.github.io/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/:3:0","tags":["博客","Hugo"],"title":"博客迁移","uri":"https://mayuanucas.github.io/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"},{"categories":["效率工具"],"content":"使用主题 Hugo提供了丰富的主题，可以在这选择喜欢的主题，并添加到刚刚新加的博客站点，以我选择的LoveIt主题为例 首先将主题添加到项目blog/themes目录，根目录下执行： git clone -b master https://github.com/dillonzq/LoveIt.git themes/LoveIt 然后在/blog/config.toml配置主题参数： baseURL = \"http://example.org/\" # [en, zh-cn, fr, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true # 网站标题 title = \"我的 Hugo 博客站点\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" [params] # LoveIt 主题版本 version = \"0.2.X\" [menu] [[menu.main]] identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" weight = 1 [[menu.main]] identifier = \"tags\" pre = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[menu.main]] identifier = \"categories\" pre = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 这个主题功能很强大，更多详细配置及功能可以参考项目Docs ","date":"2021-01-01","objectID":"https://mayuanucas.github.io/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/:4:0","tags":["博客","Hugo"],"title":"博客迁移","uri":"https://mayuanucas.github.io/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"},{"categories":["效率工具"],"content":"本地展示 此时执行以下命令即可在本地 http://localhost:1313/ 预览当前站点状态 hugo serve ","date":"2021-01-01","objectID":"https://mayuanucas.github.io/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/:5:0","tags":["博客","Hugo"],"title":"博客迁移","uri":"https://mayuanucas.github.io/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"},{"categories":["效率工具"],"content":"快速部署 准备好部署网站时，运行 hugo 可以快速构建网站，项目根目录下会生成public目录，其中包含博客站点所有内容和资源，直接部署在web服务器即可。 以部署到github pages为例，参考Hugo官网说明，创建public子模块，关联原先github page仓库用户名.github.io，将每次构建结果提交到远程仓库，可以通过自动部署脚本实现快速部署 #!/bin/sh # If a command fails then the deploy stops set -e printf \"\\033[0;32mDeploying updates to GitHub...\\033[0m\\n\" # Build the project. hugo -t LoveIt # if using a theme, replace with `hugo -t \u003cYOURTHEME\u003e` # Go To Public folder cd public # Add changes to git. git add . # Commit changes. msg=\"rebuilding site $(date)\" if [ -n \"$*\" ]; then msg=\"$*\" fi git commit -m \"$msg\" # Push source and build repos. git push origin master cd .. 到这一步，每次更新文章之后，需要在本地 blog 目录下手动执行 ./deploy.sh 来部署到github page、coding page等静态页面。 ","date":"2021-01-01","objectID":"https://mayuanucas.github.io/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/:6:0","tags":["博客","Hugo"],"title":"博客迁移","uri":"https://mayuanucas.github.io/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"},{"categories":["效率工具"],"content":"启用搜索 基于 Lunr.js 或 algolia, LoveIt 主题支持搜索功能. ","date":"2021-01-01","objectID":"https://mayuanucas.github.io/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/:7:0","tags":["博客","Hugo"],"title":"博客迁移","uri":"https://mayuanucas.github.io/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"},{"categories":["效率工具"],"content":"输出配置 为了生成搜索功能所需要的 index.json, 请在你的 网站配置 中添加 JSON 输出文件类型到 outputs 部分的 home 字段中. [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] ","date":"2021-01-01","objectID":"https://mayuanucas.github.io/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/:7:1","tags":["博客","Hugo"],"title":"博客迁移","uri":"https://mayuanucas.github.io/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"},{"categories":["效率工具"],"content":"搜索配置 基于 Hugo 生成的 index.json 文件, 你可以激活搜索功能. 这是你的 网站配置 中的搜索部分: [params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"algolia\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = true [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" 怎样选择搜索引擎? 以下是两种搜索引擎的对比: lunr: 简单, 无需同步 index.json, 没有 contentLength 的限制, 但占用带宽大且性能低 (特别是中文需要一个较大的分词依赖库) algolia: 高性能并且占用带宽低, 但需要同步 index.json 且有 contentLength 的限制 文章内容被 h2 和 h3 HTML 标签切分来提高查询效果并且基本实现全文搜索. contentLength 用来限制 h2 和 h3 HTML 标签开头的内容部分的最大长度. 关于 algolia 的使用技巧 你需要上传 index.json 到 algolia 来激活搜索功能. 你可以使用浏览器来上传 index.json 文件但是一个自动化的脚本可能效果更好. Algolia Atomic 是一个不错的选择. 为了兼容 Hugo 的多语言模式, 你需要上传不同语言的 index.json 文件到对应的 algolia index, 例如 zh-cn/index.json 或 fr/index.json… 拥抱Hugo 还有更多的功能等待探索中… 目前使用下来，Hugo整体的使用体验很不错，后面会将个人文章陆续迁移到这，慢慢完善。 ","date":"2021-01-01","objectID":"https://mayuanucas.github.io/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/:7:2","tags":["博客","Hugo"],"title":"博客迁移","uri":"https://mayuanucas.github.io/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"},{"categories":["效率工具"],"content":"正则表达式，英文是 Regular Expression，简称 RE。顾名思义，正则其实就是一种描述文本内容组成规律的表示方式。在编程语言中，正则常常用来简化文本处理的逻辑。在 Linux 命令中，它也可以帮助我们轻松地查找或编辑文件的内容，甚至实现整个文件夹中所有文件的内容替换，比如 grep、egrep、sed、awk、vim 等。另外，在各种文本编辑器中，比如 Atom，Sublime Text 或 VS Code 等，在查找或替换的时候也会使用到它。总之，正则是无处不在的，已经渗透到了日常工作的方方面面。 前言 简单来说，正则是一个非常强大的文本处理工具，它的应用极其广泛。我们可以利用它来校验数据的有效性，比如用户输入的手机号是不是符合规则；也可以从文本中提取想要的内容，比如从网页中抽取数据；还可以用来做文本内容替换，从而得到我们想要的内容。通过它的功能和分布的广泛你也能看出来，正则是一个非常值得花时间和精力好好学习的基本技能。之前需要花几十分钟才能搞定的事情，可能用正则很快就搞定了；之前不能解决的问题，通过系统地学习正则后，可能发现也能轻松解决了。还在犹豫什么？赶紧继续阅读吧！ 元字符 元字符就是指那些在正则表达式中具有特殊意义的专用字符，元字符是构成正则表达式的基本元件，正则就是由一系列的元字符组成的。 ","date":"2020-07-04","objectID":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/:0:0","tags":["正则表达式"],"title":"正则表达式入门","uri":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"},{"categories":["效率工具"],"content":"元字符的分类 元字符大致分成这几类：表示单个特殊字符的，表示空白符的，表示某个范围的，表示次数的量词，另外还有表示断言的，我们可以把它理解成边界限定。 ","date":"2020-07-04","objectID":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/:1:0","tags":["正则表达式"],"title":"正则表达式入门","uri":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"},{"categories":["效率工具"],"content":"特殊单字符 . 任意字符(换行除外) \\d 任意数字 \\D 任意非数字 \\w 任意字母、数字、下划线 \\W 任意非字母、数字、下划线 \\s 任意空白符 \\S 任意非空白符 ","date":"2020-07-04","objectID":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/:1:1","tags":["正则表达式"],"title":"正则表达式入门","uri":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"},{"categories":["效率工具"],"content":"空白符 除了特殊单字符外，你在处理文本的时候肯定还会遇到空格、换行等空白符。其实在写代码的时候也会经常用到，换行符 \\n，TAB 制表符 \\t 等。 有编程经验的程序员肯定都知道，不同的系统在每行文本结束位置默认的“换行”会有区别。比如在 Windows 里是 \\r\\n，在 Linux 和 MacOS 中是 \\n。在正则中，也是类似于 \\n 或 \\r 等方式来表示空白符号，只要记住它们就行了。平时使用正则，大部分场景使用 \\s 就可以满足需求，\\s 代表任意单个空白符号。 \\s 能匹配上各种空白符号，也可以匹配上空格。换行有专门的表示方式，在正则中，空格就是用普通的字符英文的空格来表示。 ","date":"2020-07-04","objectID":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/:1:2","tags":["正则表达式"],"title":"正则表达式入门","uri":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"},{"categories":["效率工具"],"content":"量词 在正则中，英文的星号 (*) 代表出现 0 到多次，加号 (+) 代表 1 到多次，问号 (?) 代表 0 到 1 次，{m,n}代表 m 到 n 次。 ","date":"2020-07-04","objectID":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/:1:3","tags":["正则表达式"],"title":"正则表达式入门","uri":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"},{"categories":["效率工具"],"content":"范围 在正则表达式中，表示范围的符号有四个分类： 首先是管道符号，用它来隔开多个正则，表示满足其中任意一个就行，比如 ab|bc 能匹配上 ab，也能匹配上 bc，在正则有多种情况时，这个非常有用。中括号[]代表多选一，可以表示里面的任意单个字符，所以任意元音字母可以用 [aeiou] 来表示。另外，中括号中，我们还可以用中划线表示范围，比如 [a-z] 可以表示所有小写字母。如果中括号第一个是脱字符（^），那么就表示非，表达的是不能是里面的任何单个元素。 量词与贪婪 ","date":"2020-07-04","objectID":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/:1:4","tags":["正则表达式"],"title":"正则表达式入门","uri":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"},{"categories":["效率工具"],"content":"贪婪匹配 在正则中，表示次数的量词默认是贪婪的，在贪婪模式下，会尝试尽可能最大长度去匹配。贪婪模式的特点就是尽可能进行最大长度匹配。 例如：在字符串 aaabb 中使用正则 a* 的匹配过程。a* 在匹配开头的 a 时，会尝试尽量匹配更多的 a，直到第一个字母 b 不满足要求为止，匹配上三个 a，后面每次匹配时都得到了空字符串。 ","date":"2020-07-04","objectID":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/:2:0","tags":["正则表达式"],"title":"正则表达式入门","uri":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"},{"categories":["效率工具"],"content":"非贪婪匹配 非贪婪模式会尽可能短地去匹配，在量词后面加上英文的问号 (?)，正则就变成了 a*?。 ","date":"2020-07-04","objectID":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/:3:0","tags":["正则表达式"],"title":"正则表达式入门","uri":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"},{"categories":["效率工具"],"content":"独占模式 独占模式和贪婪模式很像，独占模式会尽可能多地去匹配，如果匹配失败就结束，不会进行回溯，这样的话就比较节省时间。具体的方法就是在量词后面加上加号（+）。 独占模式性能比较好，可以节约匹配的时间和 CPU 资源，但有些情况下并不能满足需求，要想使用这个模式还要看具体需求（比如我们接下来要讲的案例），另外还得看你当前使用的语言或库的支持程度。 分组与引用 ","date":"2020-07-04","objectID":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/:4:0","tags":["正则表达式"],"title":"正则表达式入门","uri":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"},{"categories":["效率工具"],"content":"分组与编号 括号在正则中可以用于分组，被括号括起来的部分“子表达式”会被保存成一个子组。分组和编号的规则，用一句话来说就是，第几个括号就是第几个分组。以时间格式 2020-05-10 20:23:05为例，假设想要使用正则提取出里面的日期和时间。 可以写出如图所示的正则，将日期和时间都括号括起来。这个正则中一共有两个分组，日期是第 1 个，时间是第 2 个。 ","date":"2020-07-04","objectID":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/:5:0","tags":["正则表达式"],"title":"正则表达式入门","uri":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"},{"categories":["效率工具"],"content":"不保存子组 在括号里面的会保存成子组，但有些情况下，你可能只想用括号将某些部分看成一个整体，后续不用再用它，类似这种情况，在实际使用时，是没必要保存子组的。这时可以在括号里面使用 ?: 不保存子组。由于子组变少了，正则性能会更好，在子组计数时也更不容易出错。那什么是不保存子组呢？可以理解成，括号只用于归组，把某个部分当成“单个元素”，不分配编号，后面不会再进行这部分的引用。 ","date":"2020-07-04","objectID":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/:6:0","tags":["正则表达式"],"title":"正则表达式入门","uri":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"},{"categories":["效率工具"],"content":"括号嵌套 要看某个括号里面的内容是第几个分组怎么办？不要担心，其实方法很简单，我们只需要数左括号（开括号）是第几个，就可以确定是第几个子组。 ","date":"2020-07-04","objectID":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/:7:0","tags":["正则表达式"],"title":"正则表达式入门","uri":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"},{"categories":["效率工具"],"content":"命名分组 命名分组的格式为(?P\u003c分组名\u003e正则)，例如 Django的路由中，命名分组示例如下： url(r'^profile/(?P\u003cusername\u003e\\w+)/$', view_func) ","date":"2020-07-04","objectID":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/:8:0","tags":["正则表达式"],"title":"正则表达式入门","uri":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"},{"categories":["效率工具"],"content":"分组引用 大部分情况下，我们就可以使用 “反斜扛 + 编号”，即 \\number 的方式来进行引用，而 JavaScript 中是通过“$”编号来引用，如“$1”。 匹配模式 ","date":"2020-07-04","objectID":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/:9:0","tags":["正则表达式"],"title":"正则表达式入门","uri":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"},{"categories":["效率工具"],"content":"不区分大小写模式 把模式修饰符放在整个正则前面时，就表示整个正则表达式都是不区分大小写的。模式修饰符是通过 (? 模式标识) 的方式来表示的。 我们只需要把模式修饰符放在对应的正则前，就可以使用指定的模式了。在不区分大小写模式中，由于不分大小写的英文是 Case-Insensitive，那么对应的模式标识就是 I 的小写字母 i，所以不区分大小写的 cat 就可以写成 (?i)cat。 也可以用它来尝试匹配两个连续出现的 cat，如下图所示，你会发现，即便是第一个 cat 和第二个 cat 大小写不一致，也可以匹配上。 如果我们想要前面匹配上的结果，和第二次重复时的大小写一致，那该怎么做呢？我们只需要用括号把修饰符和正则 cat 部分括起来，加括号相当于作用范围的限定，让不区分大小写只作用于这个括号里的内容。 通过修饰符指定匹配模式的方式，在大部分编程语言中都是可以直接使用的，但在 JS 中我们需要使用 /regex/i 来指定匹配模式。在编程语言中通常会提供一些预定义的常量，来进行匹配模式的指定。比如 Python 中可以使用 re.IGNORECASE 或 re.I ，来传入正则函数中来表示不区分大小写。 import re re.findall(r\"cat\", \"CAT Cat cat\", re.IGNORECASE) # 输出结果为： ['CAT', 'Cat', 'cat'] 总结一下不区分大小写模式的要点： 不区分大小写模式的指定方式，使用模式修饰符 (?i)； 修饰符如果在括号内，作用范围是这个括号内的正则，而不是整个正则； 使用编程语言时可以使用预定义好的常量来指定匹配模式。 ","date":"2020-07-04","objectID":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/:10:0","tags":["正则表达式"],"title":"正则表达式入门","uri":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"},{"categories":["效率工具"],"content":"点号通配模式（Dot All） 英文的点（.）可以匹配上任何符号，但不能匹配换行。当我们需要匹配真正的“任意”符号的时候，可以使用 [\\s\\S] 或 [\\d\\D] 或 [\\w\\W] 等。 但是这么写不够简洁自然，所以正则中提供了一种模式，让英文的点（.）可以匹配上包括换行的任何字符。 这个模式就是点号通配模式，有很多地方把它称作单行匹配模式，但这么说容易造成误解，毕竟它与多行匹配模式没有联系，因此在这里统一用更容易理解的“点号通配模式”。单行的英文表示是 Single Line，单行模式对应的修饰符是 (?s)，这里选择用 the cat 来举一个点号通配模式的例子。如下图所示： ","date":"2020-07-04","objectID":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/:11:0","tags":["正则表达式"],"title":"正则表达式入门","uri":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"},{"categories":["效率工具"],"content":"多行匹配模式（Multiline） 通常情况下，^ 匹配整个字符串的开头，$ 匹配整个字符串的结尾。多行匹配模式改变的就是 \\ ^ 和 $ 的匹配行为。 多行模式的作用在于，使 ^ 和 $ 能匹配上每行的开头或结尾，我们可以使用模式修饰符号 (?m) 来指定这个模式。 ","date":"2020-07-04","objectID":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/:12:0","tags":["正则表达式"],"title":"正则表达式入门","uri":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"},{"categories":["效率工具"],"content":"注释模式（Comment） 在写代码的时候，通常会在一些关键的地方加上注释，让代码更易于理解。很多语言也支持在正则中添加注释，让正则更容易阅读和维护，这就是正则的注释模式。正则中注释模式是使用 (?#comment) 来表示。例如： (\\w+)(?#word) \\1(?#word repeat again) 断言 ","date":"2020-07-04","objectID":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/:13:0","tags":["正则表达式"],"title":"正则表达式入门","uri":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"},{"categories":["效率工具"],"content":"单词边界 在正则中使用\\b 来表示单词的边界。 \\b 中的 b 可以理解为是边界（Boundary）这个单词的首字母。 ","date":"2020-07-04","objectID":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/:14:0","tags":["正则表达式"],"title":"正则表达式入门","uri":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"},{"categories":["效率工具"],"content":"行的开始或结束 和单词的边界类似，在正则中还有文本每行的开始和结束，如果我们要求匹配的内容要出现在一行文本开头或结尾，就可以使用 ^ 和 $ 来进行位置界定。 ","date":"2020-07-04","objectID":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/:15:0","tags":["正则表达式"],"title":"正则表达式入门","uri":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"},{"categories":["效率工具"],"content":"环视 左尖括号代表看左边，没有尖括号是看右边，感叹号是非的意思。 因此，针对邮编的问题，就可以写成左边不是数字，右边也不是数字的 6 位数的正则。即 (?\u003c!\\d)[1-9]\\d{5}(?!\\d) 例如：用正则分组引用来实现替换重复出现的单词。 ","date":"2020-07-04","objectID":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/:16:0","tags":["正则表达式"],"title":"正则表达式入门","uri":"https://mayuanucas.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"},{"categories":["机器学习"],"content":"Apache Spark 是一个快速的，多用途的集群计算系统。它提供了 Java，Scala，Python 和 R 的高级 API，以及一个支持通用的执行图计算的优化过的引擎。它还支持一组丰富的高级工具，包括使用 SQL 处理结构化数据处理的 Spark SQL，用于机器学习的 MLlib，用于图计算的 GraphX，以及 Spark Streaming。 简介 Spark 于 2009 年诞生于加州大学伯克利分校 AMPLab，2013 年被捐赠给 Apache 软件基金会，2014 年 2 月成为 Apache 的顶级项目。相对于 MapReduce 的批处理计算，Spark 可以带来上百倍的性能提升，因此它成为继 MapReduce 之后，最为广泛使用的分布式计算框架。 ","date":"2020-03-09","objectID":"https://mayuanucas.github.io/spark/:0:0","tags":["Spark","scala"],"title":"Spark简明介绍","uri":"https://mayuanucas.github.io/spark/"},{"categories":["机器学习"],"content":"XGBoost是陈天奇于2014年提出的一套并行boost算法的工具库, LightGBM是微软推出的boosting框架, CatBoost是Yandex推出的Boost工具包. 本文将对这些算法进行介绍,并在数据集上对算法进行测试. XGBoost ","date":"2020-02-10","objectID":"https://mayuanucas.github.io/xgboost-lightgbm/:0:0","tags":["机器学习","数据挖掘","sklearn"],"title":"XGBoost、LightGBM、CatBoost","uri":"https://mayuanucas.github.io/xgboost-lightgbm/"},{"categories":["机器学习"],"content":"简介 XGBoost的全称是eXtreme Gradient Boosting，既可以用于分类也可以用于回归问题中, 它是经过优化的分布式梯度提升库，旨在高效、灵活且可移植。XGBoost是大规模并行boosting tree的工具，它是目前最快最好的开源 boosting tree工具包，比常见的工具包快10倍以上。在数据科学方面，有大量的Kaggle选手选用XGBoost进行数据挖掘比赛，是各大数据科学比赛的必杀武器；在工业界大规模数据方面，XGBoost的分布式版本有广泛的可移植性，支持在Kubernetes、Hadoop、SGE、MPI、 Dask等各个分布式环境上运行，使得它可以很好地解决工业界大规模数据的问题。 ","date":"2020-02-10","objectID":"https://mayuanucas.github.io/xgboost-lightgbm/:1:0","tags":["机器学习","数据挖掘","sklearn"],"title":"XGBoost、LightGBM、CatBoost","uri":"https://mayuanucas.github.io/xgboost-lightgbm/"},{"categories":["效率工具"],"content":"本文对 GitHub 的使用进行介绍. 前言 GitHub是通过Git进行版本控制的软件源代码托管服务平台，于2008年4月上线，2018年6月被微软公司收购。GitHub同时提供付费账户和免费账户，这两种账户都可以创建公开或私有的代码仓库，但付费用户支持更多功能。除了允许个人或组织创建和访问保管中的代码以外，GitHub还提供了一些方便共同开发软件的功能，例如：允许用户追踪其他用户、组织、软件库的动态，对软件代码的改动或bug提出评论等。GitHub还提供了图表功能，用于显示开发者在代码库上工作以及软件项目的开发活跃程度。 GitHub 2019年度报告显示，在过去的一年中，GitHub新增了一千万用户，现在总共有超过四千万用户，GitHub上的仓库数量超过 1 亿。 Git与GitHub的区别和联系 谈到 GitHub, 就必定会提到Git。 Git是一个开源的分布式版本控制系统,简单来说，Git 是一个管理\"代码的历史记录\"的工具,而 GitHub 本质上是一个代码托管平台，它提供的是基于 Git 的代码托管服务。对于一个团队来说，即使不使用 GitHub，也可以通过自己搭建和管理 Git 服务器来进行代码库的管理，或者选择其它一些代码托管平台，如 Gitee(码云), GitLab等。 使用 Git 管理代码前需要从 Git 官网 https://git-scm.com/ 下载相应平台的安装包并完成安装. Git 的本身不具备图形界面，一般只能在终端输入命令进行使用.但是在安装 Git 的同时，其实也装好了它提供的可视化工具，gitk 和 git-gui. gitk 是一个历史记录的图形化查看器, git-gui 主要是一个用来制作提交的工具. GitHub 也发布了面向工作流程的 Git 客户端：提供了Windows 版和 Mac 版,它们很好的展示了一个面向工作流程的工具——专注于提升常用的功能及提高协作效率. GitHub概览 ","date":"2020-01-04","objectID":"https://mayuanucas.github.io/github%E6%8E%A2%E7%B4%A2/:0:0","tags":["GitHub"],"title":"Github入门与实践","uri":"https://mayuanucas.github.io/github%E6%8E%A2%E7%B4%A2/"},{"categories":["效率工具"],"content":"基础应用场景 GitHub 的基础应用场景是作为远程的代码存储,代码版本控制. ","date":"2020-01-04","objectID":"https://mayuanucas.github.io/github%E6%8E%A2%E7%B4%A2/:1:0","tags":["GitHub"],"title":"Github入门与实践","uri":"https://mayuanucas.github.io/github%E6%8E%A2%E7%B4%A2/"},{"categories":["效率工具"],"content":"常用应用场景 ","date":"2020-01-04","objectID":"https://mayuanucas.github.io/github%E6%8E%A2%E7%B4%A2/:2:0","tags":["GitHub"],"title":"Github入门与实践","uri":"https://mayuanucas.github.io/github%E6%8E%A2%E7%B4%A2/"},{"categories":["效率工具"],"content":"协同开发 ","date":"2020-01-04","objectID":"https://mayuanucas.github.io/github%E6%8E%A2%E7%B4%A2/:2:1","tags":["GitHub"],"title":"Github入门与实践","uri":"https://mayuanucas.github.io/github%E6%8E%A2%E7%B4%A2/"},{"categories":["效率工具"],"content":"获取(学习)优秀的开源项目 由于存放在 Github 公有仓库的代码是公开的，所以可以很方便的获取、使用、学习这些优秀开源项目的代码和文档. 国内外科技公司 国外 GitHub地址 国内 GitHub地址 Google https://github.com/google 阿里巴巴 https://github.com/alibaba Facebook https://github.com/facebook 腾讯 https://github.com/Tencent Microsoft https://github.com/microsoft 滴滴 https://github.com/didi 世界闻名的技术专家 Linux 发明者 Linus Torvalds：https://github.com/torvalds Hands-On Machine Learning with Scikit-Learn and TensorFlow 的作者 Aurélien Geron：https://github.com/ageron 优秀的开源项目 项目 GitHub地址 TensorFlow https://github.com/tensorflow/tensorflow scikit-learn https://github.com/scikit-learn/scikit-learn pytorch https://github.com/pytorch/pytorch ","date":"2020-01-04","objectID":"https://mayuanucas.github.io/github%E6%8E%A2%E7%B4%A2/:2:2","tags":["GitHub"],"title":"Github入门与实践","uri":"https://mayuanucas.github.io/github%E6%8E%A2%E7%B4%A2/"},{"categories":["效率工具"],"content":"其它应用场景 ","date":"2020-01-04","objectID":"https://mayuanucas.github.io/github%E6%8E%A2%E7%B4%A2/:3:0","tags":["GitHub"],"title":"Github入门与实践","uri":"https://mayuanucas.github.io/github%E6%8E%A2%E7%B4%A2/"},{"categories":["效率工具"],"content":"搭建个人网站 基于 GitHub Pages 搭建博客，不仅搭建简单，同时还可自定义样式、绑定域名。 ","date":"2020-01-04","objectID":"https://mayuanucas.github.io/github%E6%8E%A2%E7%B4%A2/:3:1","tags":["GitHub"],"title":"Github入门与实践","uri":"https://mayuanucas.github.io/github%E6%8E%A2%E7%B4%A2/"},{"categories":["效率工具"],"content":"接触优秀开发者的有效渠道 GitHub 个人主页会有联系邮箱、个人网站等信息，通过这些信息可以与技术专家进行沟通交流。 ","date":"2020-01-04","objectID":"https://mayuanucas.github.io/github%E6%8E%A2%E7%B4%A2/:3:2","tags":["GitHub"],"title":"Github入门与实践","uri":"https://mayuanucas.github.io/github%E6%8E%A2%E7%B4%A2/"},{"categories":["效率工具"],"content":"用GitHub协作翻译 国内的一些社区会用 GitHub 组织志愿者进行文档的协作翻译。 个人仪表板 个人仪表板是登录 GitHub 时显示的第一页。访问个人仪表板，可以跟踪参与或关注的议题和拉取请求，浏览常用仓库和团队页面，了解订阅的组织和仓库中近期活动的最新信息，以及探索推荐的仓库。登录后要访问个人仪表板，在任意页面点击左上角的网站图标就能跳转到仪表板页面。 个人资料(Profile) 个人资料页面不仅展示了开发者的个人介绍, 联系邮箱, 博客地址, 社交账号, 还展示了开发者创建的或 Fork 的仓库, 页面最下方还展示了开发者每天的活跃程度(每天提交的 commit 越多, 对应日期的小方格颜色越深). 仓库 GitHub 常用术语介绍: Repository：简称Repo，可以理解为“仓库”，我们的项目就存放在仓库之中。也就是说，如果我们想要建立项目，就得先建立仓库；有多个项目，就建立多个仓库。 Issues：可以理解为“问题”，举一个简单的例子，如果我们开源一个项目，如果别人看了我们的项目，并且发现了bug，或者感觉那个地方有待改进，他就可以给我们提出Issue，等我们把Issues解决之后，就可以把这些Issues关闭；反之，我们也可以给他人提出Issue。 Watch：可以理解为“观察”，如果我们Watch了一个项目，之后，如果这个项目有了任何更新，我们都会在第一时候收到该项目的更新通知。 Star：可以理解为“点赞”，当我们感觉某一个项目做的比较好之后，就可以为这个项目点赞，而且我们点赞过的项目，都会保存到我们的Star之中，方便我们随时查看。在 GitHub 之中，如果一个项目的点星数能够超百，那么说明这个项目已经很不错了。 Fork：可以理解为“拉分支”，如果我们对某一个项目比较感兴趣，并且想在此基础之上开发新的功能，这时我们就可以Fork这个项目，这表示复制一个完成相同的项目到我们的 GitHub 账号之中，而且独立于原项目。之后，我们就可以在自己复制的项目中进行开发了。 Pull Request：可以理解为“提交请求”，此功能是建立在Fork之上的，如果我们Fork了一个项目，对其进行了修改，而且感觉修改的还不错，我们就可以对原项目的拥有者提出一个Pull请求，等其对我们的请求审核，并且通过审核之后，就可以把我们修改过的内容合并到原项目之中，这时我们就成了该项目的贡献者。 Merge：可以理解为“合并”，如果别人Fork了我们的项目，对其进行了修改，并且提出了Pull请求，这时我们就可以对这个Pull请求进行审核。如果这个Pull请求的内容满足我们的要求，并且跟我们原有的项目没有冲突的话，就可以将其合并到我们的项目之中。当然，是否进行合并，由我们决定。 Gist：如果我们没有项目可以开源或者只是单纯的想分享一些代码片段的话，我们就可以选择Gist。 Topics GitHub Topic 页面展示了最新和最流行的讨论主题，在这里不仅能够看到开发项目，还能看到很多非开发技术的讨论主题. Trending GitHub Trending 页面展示了每天/每周/每月周期的热门 Repositories 和 Developers，可以看到在某个周期处于热门状态的开发项目和开发者。 GitHub搜索 ","date":"2020-01-04","objectID":"https://mayuanucas.github.io/github%E6%8E%A2%E7%B4%A2/:3:3","tags":["GitHub"],"title":"Github入门与实践","uri":"https://mayuanucas.github.io/github%E6%8E%A2%E7%B4%A2/"},{"categories":["效率工具"],"content":"搜索开发者 比如需要寻找国产软件，搜索时设置 location 为 china，如果要寻找使用 javascript 语言开发者，则再增加 language 为 javascript，整个搜索条件就是：language:javascript location:china，从搜索结果来看，我们找到了超过 2.1 万名地区信息填写为 china 的 javascript 开发者，朋友们熟悉的阮一峰老师排在前列。根据官方手册，搜索 GitHub 用户时还支持使用 followers、in:fullname 组合条件进行搜索。 ","date":"2020-01-04","objectID":"https://mayuanucas.github.io/github%E6%8E%A2%E7%B4%A2/:4:0","tags":["GitHub"],"title":"Github入门与实践","uri":"https://mayuanucas.github.io/github%E6%8E%A2%E7%B4%A2/"},{"categories":["效率工具"],"content":"搜索仓库 在 GitHub 上找到优秀的项目和工具，通过关键字或者设置搜索条件能够帮助我们事半功倍找到好资源。 ","date":"2020-01-04","objectID":"https://mayuanucas.github.io/github%E6%8E%A2%E7%B4%A2/:5:0","tags":["GitHub"],"title":"Github入门与实践","uri":"https://mayuanucas.github.io/github%E6%8E%A2%E7%B4%A2/"},{"categories":["效率工具"],"content":"设定搜索条件 如果明确需要寻找某类特定的项目，比如用某种语言开发、Stars 数量需要达到标准的项目，在搜索框中直接输入搜索条件即可。其中用于发现项目，常用的搜索条件有：stars:、language:、forks:、in:，这些条件是设置搜索条件为项目收藏数量、开发语言、Fork数量. 比如输入 stars:\u003e=5000 language:python，得到的结果 就是收藏大于和等于 5000 的 python 项目。 通过 in: 限定符，可以将搜索限制为仓库名称、仓库说明、自述文件内容或这些的任意组合。 限定符 示例 in:name python in:name 匹配其名称中含有 “python” 的仓库。 in:description python in:name,description 匹配其名称或说明中含有 “python” 的仓库。 in:readme python in:readme 匹配其自述文件中提及 “python” 的仓库。 如果觉得记住这些搜索条件略显繁琐的话，使用 GitHub 提供的高级搜索功能同样可自定义条件进行搜索。或者参考官方给出的帮助指南 Searching on GitHub ，里面有更多关于项目、代码、评论、问题等搜索技巧。 结语 GitHub 网站上有很多优秀的开源项目，利用 GitHub 提供的各种功能，包括高级搜索、Topic、Trending 等专题页面，不仅可以帮助我们发现更多好用的效率工具和开源项目, 而且还能帮助我们了解业界最新的研究动态, 提高开发能力。 ","date":"2020-01-04","objectID":"https://mayuanucas.github.io/github%E6%8E%A2%E7%B4%A2/:5:1","tags":["GitHub"],"title":"Github入门与实践","uri":"https://mayuanucas.github.io/github%E6%8E%A2%E7%B4%A2/"}]